---
import type { HTMLTag, Polymorphic } from 'astro/types';

type Props<Tag extends HTMLTag> = Polymorphic<{
  as: Tag;
  animation: AnimationName;
  animationMobile?: AnimationName;
  duration?: string;
  timingFunction?: string;
  delay?: string;
  fillMode?: string;
  className?: string;
  showOnScroll?: boolean;
}>;

/* eslint-disable import/prefer-default-export */
export enum AnimationName {
  FADE_IN = 'fade-in',
  FADE_IN_UP = 'fade-in-up',
  FADE_IN_RIGHT = 'fade-in-right',
  FADE_IN_DOWN = 'fade-in-down',
  FADE_IN_LEFT = 'fade-in-left',
}

const {
  as: Tag = 'div',
  animation,
  animationMobile,
  duration,
  timingFunction,
  delay,
  fillMode,
  className,
  showOnScroll,
} = Astro.props;
---

<Tag
  class=`fade-in-element 
    ${className || ''}
    ${showOnScroll ? 'fade-in-scroll' : ''}`
  data-animation={animation}
  data-animation-mobile={animationMobile}
  style={{
    '--duration': duration,
    '--timing-function': timingFunction,
    '--delay': delay,
    '--fill-fode': fillMode,
  }}
>
  <slot />
</Tag>

<style>
  .fade-in-element {
    opacity: 0;
    animation-duration: var(--duration, 0.8s);
    animation-timing-function: var(--timing-function, ease-in-out);
    animation-delay: var(--delay, 0s);
    animation-fill-mode: var(--fill-mode, forwards);
  }

  .fade-in-effect {
    animation-name: var(--animation-name);
  }

  @keyframes fade-in {
    0% {
      opacity: 0;
    }
    100% {
      opacity: 1;
    }
  }

  @keyframes fade-in-up {
    0% {
      opacity: 0;
      transform: translateY(20px);
    }

    100% {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes fade-in-right {
    0% {
      opacity: 0;
      transform: translateX(-20px);
    }
    100% {
      opacity: 1;
      transform: translateX(0);
    }
  }

  @keyframes fade-in-down {
    0% {
      opacity: 0;
      transform: translateY(-20px);
    }
    100% {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes fade-in-left {
    0% {
      opacity: 0;
      transform: translateX(20px);
    }
    100% {
      opacity: 1;
      transform: translateX(0);
    }
  }
</style>

<script>
  const fadeElements = Array.from(document.querySelectorAll('.fade-in-element'));
  const fadeScrollElements = Array.from(fadeElements).filter(element =>
    element.classList.contains('fade-in-scroll'),
  );

  fadeElements.forEach(element => {
    if (element instanceof HTMLElement) {
      const animationMobile = element.dataset.animationMobile;
      let animation = element.dataset.animation;

      if (animationMobile && window.innerWidth <= 768) {
        animation = animationMobile;
      }

      if (animation) {
        element.style.setProperty('--animation-name', animation);

        if (!element.classList.contains('fade-in-scroll')) {
          element.classList.add('fade-in-effect');
        }
      }
    }
  });

  const intersectionCallback = (entries: IntersectionObserverEntry[]): void => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        entry.target.classList.add('fade-in-effect');
      }
    });
  };

  const observer = new IntersectionObserver(intersectionCallback, {
    root: null,
    rootMargin: '0px 0px -8% 0px',
    threshold: 0.2,
  });

  fadeScrollElements.forEach(element => {
    observer.observe(element);
  });

  // Cleanup function
  document.onvisibilitychange = () => {
    if (document.visibilityState === 'hidden') {
      observer.disconnect();
      return;
    }

    fadeScrollElements.forEach(element => {
      observer.observe(element);
    });
  };
</script>
