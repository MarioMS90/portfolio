---
import NAV_ITEMS from '@/constants/nav-items';
import ThemeToggle from './ThemeToggle.astro';
---

<header
  class="fixed
          top-0
          z-10
          w-full
          px-4 py-3
          font-inter font-medium"
>
  <div
    class="mx-auto
      block
      items-center
      justify-between
      md:flex md:max-w-3xl lg:max-w-4xl"
  >
    <a href="/" aria-label="Home">
      <h1 class="hidden text-2xl md:block">
        {'<Mario/>'}<span class="font-bold text-secondary">.dev</span>
      </h1></a
    >
    <nav class="flex
        items-center justify-between gap-0
        text-base
        md:gap-4">
      {
        NAV_ITEMS.map(item => (
          <a
            href={item.url}
            class={`relative
              after:absolute 
              after:bottom-0 
              after:left-0
              after:h-px
              after:w-0
              after:bg-primary
              after:transition-[width]
              md:hover:after:w-full
              dark:after:bg-white
              ${item.class}`}
            aria-label={item.title}>
            {item.title}
          </a>
        ))
      }
      <div class="md:hidden">
        <ThemeToggle />
      </div>
    </nav>
    <div class="hidden md:block">
      <ThemeToggle />
    </div>
  </div>
</header>

<style>
  .scrolled {
    @apply bg-header-light shadow-md backdrop-blur-xl dark:bg-header-dark;
  }
</style>

<script>
  const sections = document.querySelectorAll('section');
  const navItems = document.querySelectorAll('header nav a');
  const threshold = window.innerWidth >= 768 ? 0.8 : 0.5;

  const intersectionCallback = (entries: IntersectionObserverEntry[]): void => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        navItems.forEach(item => {
          if (item.getAttribute('href') == `/#${entry.target.id}`) {
            item.classList.add('text-secondary');
          } else {
            item.classList.remove('text-secondary');
          }
        });
      }
    });
  };

  const observer = new IntersectionObserver(intersectionCallback, {
    root: null,
    rootMargin: '0px 0px -20% 0px',
    threshold: threshold,
  });

  sections.forEach(section => {
    observer.observe(section);
  });

  // Cleanup function
  document.onvisibilitychange = () => {
    if (document.visibilityState === 'hidden') {
      observer.disconnect();
      return;
    }

    sections.forEach(section => {
      observer.observe(section);
    });
  };

  // Header scroll effect
  const header = document.querySelector('header');
  if (header) {
    const checkScroll = () => {
      if (window.scrollY > 0) {
        header.classList.add('scrolled');
      } else {
        header.classList.remove('scrolled');
      }
    };

    checkScroll();

    document.addEventListener('scroll', () => {
      checkScroll();
    });
  }
</script>
